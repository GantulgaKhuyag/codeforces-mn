// Generated by CoffeeScript 1.6.2
var STYLE, contest_id, translate;

String.prototype.start_with = function(str) {
  return this.substr(0, str.length) === str;
};

String.prototype.end_with = function(str) {
  return this.slice(-str.length) === str;
};

String.prototype.contain = function(str) {
  return this.indexOf(str) > -1;
};

String.prototype.is_numeric = function() {
  return !isNaN(parseFloat(this)) && isFinite(this);
};

STYLE = "<style>\n  .mn-please a { color: green !important; font-weight: bold; padding: 1px 5px 2px; border-radius: 3px }\n  .mn-please a:hover { color: #fff !important; background: #069100 !important }\n\n  .problem-statement .math { font-size: 125%; font-family: times new roman,sans-serif }\n  .sample-tests .section-title { margin-bottom: 0.5em }\n  .sample-tests .title { font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif !important; font-size: 1em !important; text-transform: none !important }\n</style>";

if (location.pathname.match(/\/problemset(?!\/problem\/)/) || location.pathname.start_with("/contests")) {
  $.ajax({
    url: "https://raw.github.com/gmunkhbaatarmn/codeforces-mn/master/out/data.txt",
    dataType: "text",
    success: function(text) {
      var id, storage, _i, _len, _ref;

      storage = {};
      storage.updated = new Date().getTime() / 1000;
      _ref = text.split("|");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        storage[id] = 1;
      }
      return localStorage.mn = JSON.stringify(storage);
    }
  });
}

if (location.pathname.match(/\/problemset(?!\/problem\/)/)) {
  /* Highlight translated problems
  */

  $(function() {
    var storage;

    $("head").append("<style>\n  .problems tr td:nth-child(2) > div:first-child { margin-left: 14px }\n  .mn td:nth-child(2) > div:first-child { margin-left: 0 !important }\n  .mn td:nth-child(2) > div:first-child a:before { content: \"✱ \"; color: #c900a9; text-decoration: none; display: inline-block; float: left; margin-right: 4px }\n</style>");
    storage = JSON.parse(localStorage.mn || "{}");
    return $(".problems tr").each(function() {
      var problem_id;

      problem_id = $.trim($(this).find("td.id").text());
      problem_id = problem_id.slice(0, -1) + "-" + problem_id.slice(-1);
      console.log(problem_id);
      if (storage[problem_id] !== void 0) {
        return $(this).addClass("mn");
      }
    });
  });
}

if (location.pathname.match(/\/problemset\/problem\//)) {
  /* Append "Монголоор унших" button
  */

  $(function() {
    var problem_id, storage;

    $("head").append(STYLE);
    storage = JSON.parse(localStorage.mn || "{}");
    problem_id = location.pathname.replace("/problemset/problem/", "").replace("/", "-").toUpperCase();
    if (storage[problem_id] !== void 0) {
      $(".problem-statement .header .title").after("<div class=\"mn-please\"><a href=\"javascript:;\">Монголоор унших</a></div>");
    }
    return $(".mn-please a").on("click", translate);
  });
}

if (location.pathname.start_with("/contests")) {
  contest_id = "";
  /* Stats about translated problems
  */

  $(function() {
    var storage;

    $("head").append("<style>\n  .mn      { font-size: 0.9em; color: #488b00 }\n  .mn-full { font-size: 0.9em; color: #c900a9 }\n</style>");
    storage = JSON.parse(localStorage.mn || "{}");
    return $(".contests-table tr td:nth-child(1)").each(function() {
      var ready, span, total;

      $(this).find("a:first").html("Enter").next()[0].outerHTML = "<span>&middot;</span> ";
      $(this).find("a:last").html("Virtual participation");
      return;
      ready = 2;
      total = 5;
      if (ready <= 0) {
        return;
      }
      span = ready === total ? "mn-full" : "mn";
      return $(this).append("<span class=\"" + span + "\">Орчуулагдсан: " + ready + " / " + total + "</span>");
    });
  });
}

if (location.pathname.match(/^\/contest\/\d+\/?$/)) {
  /* Highlight translated problems
  */

  $(function() {
    var storage;

    $("head").append("<style>\n  .problems tr td:nth-child(2) > div:first-child { margin-left: 14px }\n  .mn td:nth-child(2) > div:first-child { margin-left: 0 !important }\n  .mn td:nth-child(2) > div:first-child a:before { content: \"✱ \"; color: #c900a9; text-decoration: none; display: inline-block; float: left; margin-right: 4px }\n</style>");
    storage = JSON.parse(localStorage.mn || "{}");
    return $(".problems tr").each(function() {
      var problem_id;

      problem_id = location.pathname.replace("/contest/", "") + "-" + $.trim($(this).find("td.id").text());
      if (storage[problem_id] !== void 0) {
        return $(this).addClass("mn");
      }
    });
  });
}

if (location.pathname.match(/^\/contest\/\d+\/problem\//)) {
  console.log("Read a problem in contest");
  /* Append "Монголоор унших" button
  */

  $(function() {
    var problem_id, storage;

    $("head").append(STYLE);
    storage = JSON.parse(localStorage.mn || "{}");
    problem_id = location.pathname.replace("/contest/", "");
    problem_id = problem_id.replace("/problem/", "-").toUpperCase();
    console.log("problem_id: " + problem_id);
    if (storage[problem_id] !== void 0) {
      $(".problem-statement .header .title").after("<div class=\"mn-please\"><a href=\"javascript:;\">Монголоор унших</a></div>");
    }
    return $(".mn-please a").on("click", translate);
  });
}

translate = function() {
  var problem_id;

  if (location.pathname.start_with("/problemset/problem/")) {
    problem_id = location.pathname.replace("/problemset/problem/", "").replace("/", "-").toUpperCase();
  }
  if (location.pathname.start_with("/contest/")) {
    problem_id = location.pathname.replace("/contest/", "");
    problem_id = problem_id.replace("/problem/", "-").toUpperCase();
  }
  while (problem_id.length < 5) {
    problem_id = "0" + problem_id;
  }
  $(".mn-please").fadeOut("fast", function() {
    return $(this).html("<strong>Орчуулж байна...</strong>").fadeIn("fast");
  });
  return $.ajax({
    url: "https://raw.github.com/gmunkhbaatarmn/codeforces-mn/master/out/" + problem_id + ".html",
    dataType: "html",
    success: function(data) {
      var $data, body, curr, _ref, _ref1, _ref2;

      $data = $("<div/>").html(data);
      $(".header .title").html("" + (problem_id.slice(-1)) + ". " + ($data.find("h1")[0].innerHTML));
      body = [];
      curr = $data.find("h1").next();
      while (((_ref = curr[0]) != null ? _ref.tagName : void 0) === "P") {
        body.push(curr[0].outerHTML);
        curr = curr.next();
      }
      $(".header").next().html(body.join("\n"));
      body = [];
      curr = $data.find("h3").next();
      while (((_ref1 = curr[0]) != null ? _ref1.tagName : void 0) === "P") {
        body.push(curr[0].outerHTML);
        curr = curr.next();
      }
      $(".input-specification").html("<div class=\"section-title\">Оролт</div>" + (body.join("\n")));
      body = [];
      curr = $data.find("h3:last").next();
      while (((_ref2 = curr[0]) != null ? _ref2.tagName : void 0) === "P") {
        body.push(curr[0].outerHTML);
        curr = curr.next();
      }
      $(".output-specification").html("<div class=\"section-title\">Гаралт</div>" + (body.join("\n")));
      $(".sample-tests .section-title").html("Жишээ тэстүүд");
      $(".sample-tests .section-title").html("Жишээ тэстүүд");
      $(".sample-tests .sample-test .input .title").html("Оролт");
      $(".sample-tests .sample-test .output .title").html("Гаралт");
      return $(".mn-please").fadeOut("fast");
    }
  });
};
